openapi: 3.0.0
info:
  title: 4Events API
  description: "<p>This is an API belonging to the 4events group that is dedicated to putting people who organize directed activities in contact with people who are looking for someone to organize them.</p><p>Here you will find everything you are looking for and you can offer any activity that you want to organize</p>"
  version: 0.1.9
servers:
  - url: https://services.4events.net
    description: Main (production) server
  - url: http://localhost:3000
    description: Developer (Local)
paths:
  /api/v1/user/login:
    post:
      summary: Returns a token for a valid users.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string        
      tags:
        - Login
    
      responses:
        '201':    # status code
          description: A JSON object with token
          content:
            application/json:
              schema: 
                type: object
                items: 
                  type: string
        '401':    
          description: Unauthorized
        '422':
          description: Unprocessable Entinty

  /api/v1/user/register:
    post:
      summary: Register a new user
      requestBody:
        content:
          multipart/form-data:
            schema: 
              type: object
              required:
                - username
                - email
                - role
                - nickname
                - password
              properties:
                username:
                  type: string
                  minimum: 6
                  description: Username with minimum 6 characters
                email:
                  type: string
                  format: email
                  description: Valid User e-mail
                role:
                  type: number
                  minimum: 1
                  maximum: 1
                  default: 1
                  description: role default 1. Only a super-administrator assign another role
                nickname:
                  type: string
                  description: The nickName of user
                password:
                  type: string
                  format: password
                  minimum: 8
                  maximum: 20
                  description: The password require min. 1 uppercase 1 lowercase and 1 digit min 8 max 20 characters
                image:
                  type: string
                  format: binary
                address:
                  type: string
                city:
                  type: string
                postal_code:
                  type: string
                country:
                  type: string
                phone:
                  type: string
                latitude: 
                  type: number
                  minimum: -90.0
                  maximum: 90.0
                longitude: 
                  type: number
                  minimum: -180.0
                  maximum: 180.0
      tags:
        - User Register 

      responses:
        '200':    # status code
          description: A JSON object with data
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RegisterUser'
        '403':    
          description: The user does not have privileges for this action
        '422':
          description: Unprocessable Entinty

  /api/v1/users:
    get:
      security:
        - bearerAuth: []
      summary: Returns the user by decrypting the token or by Id.
      parameters:
      - in: path
        name: _id 
        schema:
          type: string
        required: true
        description: User id. Is optional. Only a super-administrator can modify a user other than himself
      - in: header
        name: x-access-token
        schema:
          type: string
        required: true 
      tags:
        - Control Users
      responses:
        '200':    # status code
          description: A JSON object with data
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/getUser'
        '403':    
          description: The user does not have privileges for this action
        '422':
          description: Unprocessable Entinty

    put:
      security:
        - bearerAuth: []
      summary: Modify data user by decrypting the token or by Id.
      requestBody:
        content:
          multipart/form-data:
            schema: 
              type: object
              properties:
                username:
                  type: string
                  minimum: 6
                  description: Username with minimum 6 characters
                email:
                  type: string
                  format: email
                  description: Valid User e-mail
                role:
                  type: number
                  minimum: 1
                  maximum: 1
                  default: 1
                  description: role default 1. Only a super-administrator assign another role
                nickname:
                  type: string
                  description: The nickName of user
                password:
                  type: string
                  format: password
                  minimum: 8
                  maximum: 20
                  description: The password require min. 1 uppercase 1 lowercase and 1 digit min 8 max 20 characters
                image:
                  type: string
                  format: binary
                address:
                  type: string
                city:
                  type: string
                postal_code:
                  type: string
                country:
                  type: string
                phone:
                  type: string
                latitude: 
                  type: number
                  minimum: -90.0
                  maximum: 90.0
                longitude: 
                  type: number
                  minimum: -180.0
                  maximum: 180.0
                  
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
            
      tags: 
        - Control Users
      
      responses:
        '200':    # status code
          description: A JSON object with data
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RegisterUser'
        '403':    
          description: The user does not have privileges for this action
        '422':
          description: Unprocessable Entinty
          
    delete:
      security:
        - bearerAuth: []
      summary: Delete the user by decrypting the token or by Id.
      parameters:
      - in: path
        name: _id 
        schema:
          type: string
        required: true
        description: User id. Is optional. Only a super-administrator can modify a user other than himself
      - in: header
        name: x-access-token
        schema:
          type: string
        required: true 
      tags:
        - Control Users
      responses:
        '200':    # status code
          description: A JSON object with data
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/RegisterUser'
        '403':    
          description: The user does not have privileges for this action
        '422':
          description: Unprocessable Entinty

  /api/v1/users/recoverpass:
    post:
      summary: Recover password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string      
      tags:
        - Recover password
      responses:
        '200':    # status code
          description: A JSON object with data
          content:
            application/json:
              schema: 
                type: object
                properties:
                  result:
                    type: string
                    enum:
                      - OK
                      - KO
        '403':    
          description: The user does not have privileges for this action
        '422':
          description: Unprocessable Entinty


    
  # /api/products:
  #   get:
  #     summary: Returns a list of products.
  #     tags:
  #       - Products
  #     description: Returns a list of products, can be filtered by name, tag or price
  #     parameters:
  #     - name: skip   
  #       in: query
  #       schema:
  #         type: integer
  #       description: Number given to skip in order to paginate. By default 0, returns first page
  #     - name: limit
  #       in: query
  #       schema:
  #         type: integer
  #       description: The number of products to return in order to paginate. By default 10      
  #     - in: query
  #       name: name  
  #       required: false
  #       schema:
  #         type: string
  #       description: Filter by product name, it looks for a name that starts with the characters given example "Bic", you will get all products that starts with Bic
  #     - in: query
  #       name: tags
  #       required: false
  #       schema:
  #         type: string
  #       description: Filter by product tag, example (tags=motor lifestyle) each tag must be separeted by commas ,
  #     - in: query
  #       name: min_price  
  #       required: false
  #       schema:
  #         type: integer
  #       description: Filter by product minimun price 
  #     - in: query
  #       name: max_price  
  #       required: false
  #       schema:
  #         type: integer
  #       description: Filter by product maximun price
  #     - in: query
  #       name: type  
  #       required: false
  #       schema:
  #         type: string
  #         enum:
  #           - busqueda
  #           - venta
  #       description: Get the list with products on sale or products that people are looking for.
  #     - in: query
  #       name: sort  
  #       required: false
  #       schema:
  #         type: string
  #       description: Set the order of the list, put field name to order by it example "sort=name". If you use - character you get the list in desc order example "sort=-name"
      
  #     responses:
  #       '200':    # status code
  #         description: A JSON array of user names
  #         content:
  #           application/json:
  #             schema: 
  #               type: array
  #               items: 
  #                 type: string
  #       '400':    
  #         description: `page`  + `num_productos_per_page` are required

  # /api/products/new:
  #   post:
  #     summary: Create a new product.
  #     tags:
  #       - Products
  #     consumes:
  #       - application/json
  #     requestBody:
  #       description: Product
  #       required: true
  #       content: 
  #         application/json:
  #           schema:
  #             summary: An example of Product
  #             type: object
  #             required:
  #               - name
  #               - price
  #               - sale
  #               - picture
  #             properties:
  #               name:
  #                 type: string
  #               price:
  #                 type: number
  #               sale:
  #                 type: boolean
  #               picture:
  #                 type: string
  #               tags:
  #                 type: array    
  #                 items:
  #                   type:string
  #                 uniqueItems: true
  #             example:
  #               name: "Rain Boots"
  #               price: 35
  #               sale: false
  #               picture: "./images/rain-boots.jpeg"
  #               tags: ["lifestyle","fashion"]            
  #     responses:
  #       '201':    # status code
  #         description: Product Created

  # /api/products/{id}/update:
  #   put:
  #     summary: Update the product given.
  #     tags:
  #       - Products
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         description: The product ID
  #     requestBody:
  #       description: Product to be updated, can be all the fields, two or one. Whatever it is wanted. Example {"name":"nueva Bici"} {"name:"nuevaBici", price:32}
  #       required: true        
  #       content:
  #         application/json:
  #           schema:
  #             summary: An example of Product
  #             type: object              
  #             properties:
  #               name:
  #                 type: string
  #               price:
  #                 type: number
  #               sale:
  #                 type: boolean
  #               picture:
  #                 type: string
  #               tags:
  #                 type: array
  #                 items:
  #                   type: string
  #                 uniqueItems: true
  #             example:
  #               name: "Nueva Bici"
  #               price: 48
  #               sale: false
  #               picture: "./images/Bicicleta.jpeg"
  #               tags: ["lifestyle", "motor"]
  #     responses:
  #       '200':    # status code
  #         description: Product Updated

  # /api/products/{id}/delete:
  #   delete:
  #     summary: Delete the product given.
  #     tags:
  #       - Products
  #     parameters:
  #       - in: path
  #         name: id
  #         required: true
  #         description: The product ID
  #     responses:
  #       '200':    # status code
  #         description: Product Deleted

  # /api/tags:
  #   get:
  #     summary: Returns a list of tags.
  #     tags:
  #       - Tags
  #     description: Returns a list of products tags
  #     responses:
  #       '200':    # status code
  #         description: A JSON array of user names
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    getUser:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        city:
          type: string
        postal_code:
          type: string
        country:
          type: string
        role:
          type: number
        phone:
          type: string
        nickname:
          type: string
        image:
          type: string
        location:
          type: array
          items:
            $ref: "#/components/schemas/Point"
       
    Geometry:
        type: object
        description: GeoJSon geometry
        
        required:
          - type
        externalDocs:
          url: http://geojson.org/geojson-spec.html#geometry-objects
        properties:
          type:
            type: string
            enum:
            - Point
            - LineString
            - Polygon
            - MultiPoint
            - MultiLineString
            - MultiPolygon
            description: the geometry type
      
    Point2D:
      type: array
      maxItems: 2
      minItems: 2
      items:
        type: number

    Point:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id2
      allOf:
        - $ref: "#/components/schemas/Geometry"
        - properties:
            coordinates:
              $ref: '#/components/schemas/Point2D'

    RegisterUser:
      type: object
      properties:
        result:
          type: object
          properties:
            _id:
              type: string
              format: uuid
            username:
              type: string
            nickname:
              type: string
            
